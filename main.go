// touched for cleanup
package main

import (
	"io"
	"log"
	"os"
	"time"

	"github.com/nigdanil/Quality_Control_System_Generation/DB"
	"github.com/nigdanil/Quality_Control_System_Generation/Generation"
)

func main() {
	// –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
	logFile, err := os.OpenFile("generation_log.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤: %v", err)
	}
	defer logFile.Close()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª –∏ –∫–æ–Ω—Å–æ–ª—å
	multiWriter := io.MultiWriter(os.Stdout, logFile)
	log.SetOutput(multiWriter)

	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Quality Control System")

	// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	db, err := DB.OpenDatabase("Quality_Control.SQLite")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
	}
	defer db.Close()

	log.Println("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ")

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏
	logData, err := DB.GetLastGenerationLog(db)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –ë–î: %v", err)
	}

	log.Println("‚ÑπÔ∏è  –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –∏–∑ generation_logs")

	const iterations = 3
	const interval = 5 * time.Second

	for i := 1; i <= iterations; i++ {
		startTime := time.Now()
		log.Printf("‚ñ∂Ô∏è  –ò—Ç–µ—Ä–∞—Ü–∏—è %d ‚Äî —Å—Ç–∞—Ä—Ç: %s\n", i, startTime.Format("15:04:05"))

		fileName, duration, err := Generation.GenerateImage(logData)
		endTime := time.Now()

		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (%s): %v\n", endTime.Format("15:04:05"), err)
		} else {
			log.Printf("‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: %s (%0.2f —Å–µ–∫.) ‚Äî –∑–∞–≤–µ—Ä—à–µ–Ω–æ: %s\n", fileName, duration, endTime.Format("15:04:05"))
		}

		if i < iterations {
			time.Sleep(interval)
		}
	}

	log.Println("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
}
